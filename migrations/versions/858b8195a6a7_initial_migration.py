"""Initial migration.

Revision ID: 858b8195a6a7
Revises: 
Create Date: 2024-08-19 16:49:21.748083

"""
from alembic import op
import sqlalchemy as sa
# from api.models import User, Department, Role
from api.models.users import User
from api.models.departments import Department
from api.models.roles import Role
from flask_bcrypt import Bcrypt
from utils.department_enum import DepartmentEnum
from utils.role_enum import RoleEnum


# revision identifiers, used by Alembic.
revision = '858b8195a6a7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('department',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('department_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('department_code', sa.String(length=2), nullable=False),
    sa.Column('create_user', sa.Integer(), nullable=True),
    sa.Column('create_time', sa.DateTime(), nullable=True),
    sa.Column('update_time', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('department_code'),
    sa.UniqueConstraint('department_name')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role_name', sa.String(length=50), nullable=False),
    sa.Column('role_code', sa.String(length=2), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=True),
    sa.Column('create_time', sa.DateTime(), nullable=True),
    sa.Column('update_time', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_code'),
    sa.UniqueConstraint('role_name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('first_name', sa.String(length=80), nullable=False),
    sa.Column('last_name', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('create_time', sa.DateTime(), nullable=True),
    sa.Column('update_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['department.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    # ### end Alembic commands ###

    # Insert initial data
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # add admin department
    admin_department = Department(department_name=DepartmentEnum.ADMINISTRATION.name,
                                  department_code=DepartmentEnum.ADMINISTRATION.code)
    it_department = Department(department_name=DepartmentEnum.IT.name,
                                  department_code=DepartmentEnum.IT.code)
    law_department = Department(department_name=DepartmentEnum.LAW.name,
                               department_code=DepartmentEnum.LAW.code)
    marketing_department = Department(department_name=DepartmentEnum.MARKETING.name,
                               department_code=DepartmentEnum.MARKETING.code)
    finance_department = Department(department_name=DepartmentEnum.FINANCE.name,
                               department_code=DepartmentEnum.FINANCE.code)
    project_manager_department = Department(department_name=DepartmentEnum.PROJECT_MANAGER.name,
                               department_code=DepartmentEnum.PROJECT_MANAGER.code)

    session.add_all([
        admin_department,
        it_department,
        law_department,
        marketing_department,
        finance_department,
        project_manager_department
    ])

    session.commit()

    # add admin role
    admin_role = Role(role_name=RoleEnum.ADMIN.name, role_code=RoleEnum.ADMIN.code)
    user_role = Role(role_name=RoleEnum.USER.name, role_code=RoleEnum.USER.code)
    session.add_all([
        admin_role,
        user_role
    ])

    session.commit()

    # add admin user
    # initial admin password
    password = Bcrypt().generate_password_hash('a123456').decode('utf-8')
    session.add(User(username='admin', first_name='John',
                     last_name='Smith', password=password, email='admin@gmail.com',
                     role_id=admin_role.id, department_id=admin_department.id))
    session.add(User(username='emma001', first_name='Emma',
                     last_name='Johnson', password=password, email='emma@gmail.com',
                     role_id=user_role.id, department_id=law_department.id))
    session.add(User(username='james001', first_name='James',
                     last_name='Jones', password=password, email='james@gmail.com',
                     role_id=user_role.id, department_id=finance_department.id))


    session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('department')
    # ### end Alembic commands ###
